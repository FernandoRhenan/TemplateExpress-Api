// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TemplateExpress.Api.Data;

#nullable disable

namespace TemplateExpress.Api.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250409154959_FirstMigrations")]
    partial class FirstMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TemplateExpress.Api.Entities.EmailConfirmationTokenEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("EmailConfirmationTokens");
                });

            modelBuilder.Entity("TemplateExpress.Api.Entities.TemplateEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("Height")
                        .HasColumnType("smallint");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<short>("Width")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("TemplateExpress.Api.Entities.TemplateObjectEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<short>("BaseBoxHeight")
                        .HasColumnType("smallint");

                    b.Property<bool>("Bold")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FillStyle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("FontBoundingBoxDescent")
                        .HasColumnType("smallint");

                    b.Property<string>("FontFamily")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("FontSize")
                        .HasColumnType("smallint");

                    b.Property<bool>("Italic")
                        .HasColumnType("boolean");

                    b.Property<short>("MaxRows")
                        .HasColumnType("smallint");

                    b.Property<long>("TemplateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("XPoint")
                        .HasColumnType("smallint");

                    b.Property<short>("YPoint")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateObjects");
                });

            modelBuilder.Entity("TemplateExpress.Api.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("ConfirmedAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TemplateExpress.Api.Entities.EmailConfirmationTokenEntity", b =>
                {
                    b.HasOne("TemplateExpress.Api.Entities.UserEntity", "User")
                        .WithOne("EmailConfirmationToken")
                        .HasForeignKey("TemplateExpress.Api.Entities.EmailConfirmationTokenEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TemplateExpress.Api.Entities.TemplateEntity", b =>
                {
                    b.HasOne("TemplateExpress.Api.Entities.UserEntity", "User")
                        .WithMany("Templates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TemplateExpress.Api.Entities.TemplateObjectEntity", b =>
                {
                    b.HasOne("TemplateExpress.Api.Entities.TemplateEntity", "Template")
                        .WithMany("TemplateObjects")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("TemplateExpress.Api.Entities.TemplateEntity", b =>
                {
                    b.Navigation("TemplateObjects");
                });

            modelBuilder.Entity("TemplateExpress.Api.Entities.UserEntity", b =>
                {
                    b.Navigation("EmailConfirmationToken")
                        .IsRequired();

                    b.Navigation("Templates");
                });
#pragma warning restore 612, 618
        }
    }
}
